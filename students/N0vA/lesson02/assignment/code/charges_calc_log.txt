> c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(1)<module>()
-> '''
(Pdb)   1  ->	'''
  2  	Returns total price paid for individual rentals
  3  	'''
  4  	import argparse
  5  	import json
  6  	import datetime
  7  	import math
  8  	
  9  	def parse_cmd_arguments():
 10  	    parser = argparse.ArgumentParser(description='Process some integers.')
 11  	    parser.add_argument('-i', '--input', help='input JSON file', required=True)
 12  	    parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 13  	
 14  	    return parser.parse_args()
 15  	
 16  	
 17  	def load_rentals_file(filename):
 18  	    with open(filename) as file:
 19  	        try:
 20  	            data = json.load(file)
 21  	        except:
 22  	            exit(0)
 23  	    return data
 24  	
 25  	def calculate_additional_fields(data):
 26  	    for value in data.values():
 27  	        try:
 28  	            rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29  	            rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30  	            value['total_days'] = (rental_end - rental_start).days
 31  	            value['total_price'] = value['total_days'] * value['price_per_day']
 32  	            value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33  	            value['unit_cost'] = value['total_price'] / value['units_rented']
 34  	        except:
 35  	            exit(0)
 36  	
 37  	    return data
 38  	
 39  	def save_to_json(filename, data):
 40  	    with open(filename, 'w') as file:
 41  	        json.dump(data, file)
 42  	
 43  	if __name__ == "__main__":
 44  	    args = parse_cmd_arguments()
 45  	    data = load_rentals_file(args.input)
 46  	    data = calculate_additional_fields(data)
 47  	    save_to_json(args.output, data)
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(4)<module>()
-> import argparse
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(5)<module>()
-> import json
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(6)<module>()
-> import datetime
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(7)<module>()
-> import math
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(9)<module>()
-> def parse_cmd_arguments():
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(17)<module>()
-> def load_rentals_file(filename):
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(25)<module>()
-> def calculate_additional_fields(data):
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(39)<module>()
-> def save_to_json(filename, data):
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(43)<module>()
-> if __name__ == "__main__":
(Pdb)   1  	'''
  2  	Returns total price paid for individual rentals
  3  	'''
  4  	import argparse
  5  	import json
  6  	import datetime
  7  	import math
  8  	
  9  	def parse_cmd_arguments():
 10  	    parser = argparse.ArgumentParser(description='Process some integers.')
 11  	    parser.add_argument('-i', '--input', help='input JSON file', required=True)
 12  	    parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 13  	
 14  	    return parser.parse_args()
 15  	
 16  	
 17  	def load_rentals_file(filename):
 18  	    with open(filename) as file:
 19  	        try:
 20  	            data = json.load(file)
 21  	        except:
 22  	            exit(0)
 23  	    return data
 24  	
 25  	def calculate_additional_fields(data):
 26  	    for value in data.values():
 27  	        try:
 28  	            rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29  	            rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30  	            value['total_days'] = (rental_end - rental_start).days
 31  	            value['total_price'] = value['total_days'] * value['price_per_day']
 32  	            value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33  	            value['unit_cost'] = value['total_price'] / value['units_rented']
 34  	        except:
 35  	            exit(0)
 36  	
 37  	    return data
 38  	
 39  	def save_to_json(filename, data):
 40  	    with open(filename, 'w') as file:
 41  	        json.dump(data, file)
 42  	
 43  ->	if __name__ == "__main__":
 44  	    args = parse_cmd_arguments()
 45  	    data = load_rentals_file(args.input)
 46  	    data = calculate_additional_fields(data)
 47  	    save_to_json(args.output, data)
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(44)<module>()
-> args = parse_cmd_arguments()
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(45)<module>()
-> data = load_rentals_file(args.input)
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(46)<module>()
-> data = calculate_additional_fields(data)
(Pdb) --Call--
> c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(25)calculate_additional_fields()
-> def calculate_additional_fields(data):
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(26)calculate_additional_fields()
-> for value in data.values():
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(27)calculate_additional_fields()
-> try:
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(28)calculate_additional_fields()
-> rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
(Pdb) *** NameError: name 'rental_start' is not defined
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(29)calculate_additional_fields()
-> rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
(Pdb) *** NameError: name 'rental_end' is not defined
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(30)calculate_additional_fields()
-> value['total_days'] = (rental_end - rental_start).days
(Pdb) *** KeyError: 'total_days'
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(31)calculate_additional_fields()
-> value['total_price'] = value['total_days'] * value['price_per_day']
(Pdb) *** SyntaxError: unexpected EOF while parsing
(Pdb) *** KeyError: 'total_price'
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(32)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) ValueError: math domain error
> c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(32)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(34)calculate_additional_fields()
-> except:
(Pdb) > c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(35)calculate_additional_fields()
-> exit(0)
(Pdb) SystemExit: 0
> c:\users\jimal\documents\projects\sp_python220b_2019\students\n0va\lesson02\assignment\code\charges_calc.py(35)calculate_additional_fields()
-> exit(0)
(Pdb) Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> c:\users\jimal\appdata\local\programs\python\python38-32\lib\cmd.py(126)cmdloop()
-> line = input(self.prompt)
(Pdb) 