Notes:
1. Running parallel.py takes around .85 seconds while linear.py takes around .08 seconds with the expanded 1000 imports per file
    a. parallel.py takes around .04 seconds for product files and .02 seconds for customers files
    b. linear.py takes around .015 seconds for product files and .02 seconds for customers files
2. Running parallel.py used around 2% cpu capacity while linear.py used around .75% cpu capacity with the expanded 1000 imports per file
3. While the time to actually do the imports is about the same for both files, the complexity of multiprocessing added to the time taken
   by the program as a whole.
3. Since I am using multiprocessing rather than multithreading to run this program, there will be no GIL contention for locks.

Conclusion:
-This change is not necessary. The performance of running the imports in parallel was worse than the performance of using a linear 
method in both time and cpu usage.

-


