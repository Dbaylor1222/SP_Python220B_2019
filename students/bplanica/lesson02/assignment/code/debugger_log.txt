C:\_PythonClass\AdvPython\SP_Python220B_2019\students\bplanica\lesson02\assignment\code>python -m pdb charges_calc.py
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(1)<module>()
-> '''
(Pdb) ll
  1  -> '''
  2     Returns total price paid for individual rentals
  3     '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8
  9     def parse_cmd_arguments():
 10         parser = argparse.ArgumentParser(description='Process some integers.')
 11         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 12         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 13
 14         return parser.parse_args()
 15
 16
 17     def load_rentals_file(filename):
 18         with open(filename) as file:
 19             try:
 20                 data = json.load(file)
 21             except:
 22                 exit(0)
 23         return data
 24
 25     def calculate_additional_fields(data):
 26         for value in data.values():
 27             try:
 28                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30                 value['total_days'] = (rental_end - rental_start).days
 31                 value['total_price'] = value['total_days'] * value['price_per_day']
 32                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33                 value['unit_cost'] = value['total_price'] / value['units_rented']
 34             except:
 35                 exit(0)
 36
 37         return data
 38
 39     def save_to_json(filename, data):
 40         with open(filename, 'w') as file:
 41             json.dump(data, file)
 42
 43     if __name__ == "__main__":
 44         args = parse_cmd_arguments()
 45         data = load_rentals_file(args.input)
 46         data = calculate_additional_fields(data)
 47         save_to_json(args.output, data)
(Pdb) b 44
Breakpoint 1 at c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py:44
(Pdb) c
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(44)<module>()
-> args = parse_cmd_arguments()
(Pdb) s
--Call--
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(9)parse_cmd_arguments()
-> def parse_cmd_arguments():
(Pdb) n
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(10)parse_cmd_arguments()
-> parser = argparse.ArgumentParser(description='Process some integers.')
(Pdb) n
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(11)parse_cmd_arguments()
-> parser.add_argument('-i', '--input', help='input JSON file', required=True)
(Pdb) n
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(12)parse_cmd_arguments()
-> parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
(Pdb) n
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(14)parse_cmd_arguments()
-> return parser.parse_args()
(Pdb) n
usage: charges_calc.py [-h] -i INPUT -o OUTPUT
charges_calc.py: error: the following arguments are required: -i/--input, -o/--output
SystemExit: 2
> c:\_pythonclass\advpython\sp_python220b_2019\students\bplanica\lesson02\assignment\code\charges_calc.py(14)parse_cmd_arguments()
-> return parser.parse_args()
(Pdb)
